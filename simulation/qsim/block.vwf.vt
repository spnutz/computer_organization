// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2018 02:00:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    all_total
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module all_total_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module all_total_vlg_check_tst (
	alu_result,
	op_check,
	rs_out,
	rt_out,
	sampler_rx
);
input [7:0] alu_result;
input [1:0] op_check;
input [7:0] rs_out;
input [7:0] rt_out;
input sampler_rx;

reg [7:0] alu_result_expected;
reg [1:0] op_check_expected;
reg [7:0] rs_out_expected;
reg [7:0] rt_out_expected;

reg [7:0] alu_result_prev;
reg [1:0] op_check_prev;
reg [7:0] rs_out_prev;
reg [7:0] rt_out_prev;

reg [7:0] alu_result_expected_prev;
reg [1:0] op_check_expected_prev;
reg [7:0] rs_out_expected_prev;
reg [7:0] rt_out_expected_prev;

reg [7:0] last_alu_result_exp;
reg [1:0] last_op_check_exp;
reg [7:0] last_rs_out_exp;
reg [7:0] last_rt_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_result_prev = alu_result;
	op_check_prev = op_check;
	rs_out_prev = rs_out;
	rt_out_prev = rt_out;
end

// update expected /o prevs

always @(trigger)
begin
	alu_result_expected_prev = alu_result_expected;
	op_check_expected_prev = op_check_expected;
	rs_out_expected_prev = rs_out_expected;
	rt_out_expected_prev = rt_out_expected;
end


// expected op_check[ 1 ]
initial
begin
	op_check_expected[1] = 1'bX;
end 
// expected op_check[ 0 ]
initial
begin
	op_check_expected[0] = 1'bX;
end 
// expected rs_out[ 7 ]
initial
begin
	rs_out_expected[7] = 1'bX;
end 
// expected rs_out[ 6 ]
initial
begin
	rs_out_expected[6] = 1'bX;
end 
// expected rs_out[ 5 ]
initial
begin
	rs_out_expected[5] = 1'bX;
end 
// expected rs_out[ 4 ]
initial
begin
	rs_out_expected[4] = 1'bX;
end 
// expected rs_out[ 3 ]
initial
begin
	rs_out_expected[3] = 1'bX;
end 
// expected rs_out[ 2 ]
initial
begin
	rs_out_expected[2] = 1'bX;
end 
// expected rs_out[ 1 ]
initial
begin
	rs_out_expected[1] = 1'bX;
end 
// expected rs_out[ 0 ]
initial
begin
	rs_out_expected[0] = 1'bX;
end 
// expected rt_out[ 7 ]
initial
begin
	rt_out_expected[7] = 1'bX;
end 
// expected rt_out[ 6 ]
initial
begin
	rt_out_expected[6] = 1'bX;
end 
// expected rt_out[ 5 ]
initial
begin
	rt_out_expected[5] = 1'bX;
end 
// expected rt_out[ 4 ]
initial
begin
	rt_out_expected[4] = 1'bX;
end 
// expected rt_out[ 3 ]
initial
begin
	rt_out_expected[3] = 1'bX;
end 
// expected rt_out[ 2 ]
initial
begin
	rt_out_expected[2] = 1'bX;
end 
// expected rt_out[ 1 ]
initial
begin
	rt_out_expected[1] = 1'bX;
end 
// expected rt_out[ 0 ]
initial
begin
	rt_out_expected[0] = 1'bX;
end 
// expected alu_result[ 7 ]
initial
begin
	alu_result_expected[7] = 1'bX;
end 
// expected alu_result[ 6 ]
initial
begin
	alu_result_expected[6] = 1'bX;
end 
// expected alu_result[ 5 ]
initial
begin
	alu_result_expected[5] = 1'bX;
end 
// expected alu_result[ 4 ]
initial
begin
	alu_result_expected[4] = 1'bX;
end 
// expected alu_result[ 3 ]
initial
begin
	alu_result_expected[3] = 1'bX;
end 
// expected alu_result[ 2 ]
initial
begin
	alu_result_expected[2] = 1'bX;
end 
// expected alu_result[ 1 ]
initial
begin
	alu_result_expected[1] = 1'bX;
end 
// expected alu_result[ 0 ]
initial
begin
	alu_result_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_result_expected or alu_result or op_check_expected or op_check or rs_out_expected or rs_out or rt_out_expected or rt_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_result = %b | expected op_check = %b | expected rs_out = %b | expected rt_out = %b | ",alu_result_expected_prev,op_check_expected_prev,rs_out_expected_prev,rt_out_expected_prev);
	$display("| real alu_result = %b | real op_check = %b | real rs_out = %b | real rt_out = %b | ",alu_result_prev,op_check_prev,rs_out_prev,rt_out_prev);
`endif
	if (
		( alu_result_expected_prev[0] !== 1'bx ) && ( alu_result_prev[0] !== alu_result_expected_prev[0] )
		&& ((alu_result_expected_prev[0] !== last_alu_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[0] = alu_result_expected_prev[0];
	end
	if (
		( alu_result_expected_prev[1] !== 1'bx ) && ( alu_result_prev[1] !== alu_result_expected_prev[1] )
		&& ((alu_result_expected_prev[1] !== last_alu_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[1] = alu_result_expected_prev[1];
	end
	if (
		( alu_result_expected_prev[2] !== 1'bx ) && ( alu_result_prev[2] !== alu_result_expected_prev[2] )
		&& ((alu_result_expected_prev[2] !== last_alu_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[2] = alu_result_expected_prev[2];
	end
	if (
		( alu_result_expected_prev[3] !== 1'bx ) && ( alu_result_prev[3] !== alu_result_expected_prev[3] )
		&& ((alu_result_expected_prev[3] !== last_alu_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[3] = alu_result_expected_prev[3];
	end
	if (
		( alu_result_expected_prev[4] !== 1'bx ) && ( alu_result_prev[4] !== alu_result_expected_prev[4] )
		&& ((alu_result_expected_prev[4] !== last_alu_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[4] = alu_result_expected_prev[4];
	end
	if (
		( alu_result_expected_prev[5] !== 1'bx ) && ( alu_result_prev[5] !== alu_result_expected_prev[5] )
		&& ((alu_result_expected_prev[5] !== last_alu_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[5] = alu_result_expected_prev[5];
	end
	if (
		( alu_result_expected_prev[6] !== 1'bx ) && ( alu_result_prev[6] !== alu_result_expected_prev[6] )
		&& ((alu_result_expected_prev[6] !== last_alu_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[6] = alu_result_expected_prev[6];
	end
	if (
		( alu_result_expected_prev[7] !== 1'bx ) && ( alu_result_prev[7] !== alu_result_expected_prev[7] )
		&& ((alu_result_expected_prev[7] !== last_alu_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[7] = alu_result_expected_prev[7];
	end
	if (
		( op_check_expected_prev[0] !== 1'bx ) && ( op_check_prev[0] !== op_check_expected_prev[0] )
		&& ((op_check_expected_prev[0] !== last_op_check_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_check_expected_prev);
		$display ("     Real value = %b", op_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_op_check_exp[0] = op_check_expected_prev[0];
	end
	if (
		( op_check_expected_prev[1] !== 1'bx ) && ( op_check_prev[1] !== op_check_expected_prev[1] )
		&& ((op_check_expected_prev[1] !== last_op_check_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_check_expected_prev);
		$display ("     Real value = %b", op_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_op_check_exp[1] = op_check_expected_prev[1];
	end
	if (
		( rs_out_expected_prev[0] !== 1'bx ) && ( rs_out_prev[0] !== rs_out_expected_prev[0] )
		&& ((rs_out_expected_prev[0] !== last_rs_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[0] = rs_out_expected_prev[0];
	end
	if (
		( rs_out_expected_prev[1] !== 1'bx ) && ( rs_out_prev[1] !== rs_out_expected_prev[1] )
		&& ((rs_out_expected_prev[1] !== last_rs_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[1] = rs_out_expected_prev[1];
	end
	if (
		( rs_out_expected_prev[2] !== 1'bx ) && ( rs_out_prev[2] !== rs_out_expected_prev[2] )
		&& ((rs_out_expected_prev[2] !== last_rs_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[2] = rs_out_expected_prev[2];
	end
	if (
		( rs_out_expected_prev[3] !== 1'bx ) && ( rs_out_prev[3] !== rs_out_expected_prev[3] )
		&& ((rs_out_expected_prev[3] !== last_rs_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[3] = rs_out_expected_prev[3];
	end
	if (
		( rs_out_expected_prev[4] !== 1'bx ) && ( rs_out_prev[4] !== rs_out_expected_prev[4] )
		&& ((rs_out_expected_prev[4] !== last_rs_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[4] = rs_out_expected_prev[4];
	end
	if (
		( rs_out_expected_prev[5] !== 1'bx ) && ( rs_out_prev[5] !== rs_out_expected_prev[5] )
		&& ((rs_out_expected_prev[5] !== last_rs_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[5] = rs_out_expected_prev[5];
	end
	if (
		( rs_out_expected_prev[6] !== 1'bx ) && ( rs_out_prev[6] !== rs_out_expected_prev[6] )
		&& ((rs_out_expected_prev[6] !== last_rs_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[6] = rs_out_expected_prev[6];
	end
	if (
		( rs_out_expected_prev[7] !== 1'bx ) && ( rs_out_prev[7] !== rs_out_expected_prev[7] )
		&& ((rs_out_expected_prev[7] !== last_rs_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_out_expected_prev);
		$display ("     Real value = %b", rs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_out_exp[7] = rs_out_expected_prev[7];
	end
	if (
		( rt_out_expected_prev[0] !== 1'bx ) && ( rt_out_prev[0] !== rt_out_expected_prev[0] )
		&& ((rt_out_expected_prev[0] !== last_rt_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[0] = rt_out_expected_prev[0];
	end
	if (
		( rt_out_expected_prev[1] !== 1'bx ) && ( rt_out_prev[1] !== rt_out_expected_prev[1] )
		&& ((rt_out_expected_prev[1] !== last_rt_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[1] = rt_out_expected_prev[1];
	end
	if (
		( rt_out_expected_prev[2] !== 1'bx ) && ( rt_out_prev[2] !== rt_out_expected_prev[2] )
		&& ((rt_out_expected_prev[2] !== last_rt_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[2] = rt_out_expected_prev[2];
	end
	if (
		( rt_out_expected_prev[3] !== 1'bx ) && ( rt_out_prev[3] !== rt_out_expected_prev[3] )
		&& ((rt_out_expected_prev[3] !== last_rt_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[3] = rt_out_expected_prev[3];
	end
	if (
		( rt_out_expected_prev[4] !== 1'bx ) && ( rt_out_prev[4] !== rt_out_expected_prev[4] )
		&& ((rt_out_expected_prev[4] !== last_rt_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[4] = rt_out_expected_prev[4];
	end
	if (
		( rt_out_expected_prev[5] !== 1'bx ) && ( rt_out_prev[5] !== rt_out_expected_prev[5] )
		&& ((rt_out_expected_prev[5] !== last_rt_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[5] = rt_out_expected_prev[5];
	end
	if (
		( rt_out_expected_prev[6] !== 1'bx ) && ( rt_out_prev[6] !== rt_out_expected_prev[6] )
		&& ((rt_out_expected_prev[6] !== last_rt_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[6] = rt_out_expected_prev[6];
	end
	if (
		( rt_out_expected_prev[7] !== 1'bx ) && ( rt_out_prev[7] !== rt_out_expected_prev[7] )
		&& ((rt_out_expected_prev[7] !== last_rt_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_out_expected_prev);
		$display ("     Real value = %b", rt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_out_exp[7] = rt_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module all_total_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] alu_result;
wire [1:0] op_check;
wire [7:0] rs_out;
wire [7:0] rt_out;

wire sampler;                             

// assign statements (if any)                          
all_total i1 (
// port map - connection between master ports and signals/registers   
	.alu_result(alu_result),
	.clk(clk),
	.op_check(op_check),
	.rs_out(rs_out),
	.rt_out(rt_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

all_total_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

all_total_vlg_check_tst tb_out(
	.alu_result(alu_result),
	.op_check(op_check),
	.rs_out(rs_out),
	.rt_out(rt_out),
	.sampler_rx(sampler)
);
endmodule

