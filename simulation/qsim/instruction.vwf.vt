// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2018 22:40:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    instruction_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module instruction_file_vlg_sample_tst(
	pc_in,
	sampler_tx
);
input [1:0] pc_in;
output sampler_tx;

reg sample;
time current_time;
always @(pc_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module instruction_file_vlg_check_tst (
	Opcode,
	Opcode_check,
	rd,
	rs,
	rt,
	sampler_rx
);
input [1:0] Opcode;
input [1:0] Opcode_check;
input [1:0] rd;
input [1:0] rs;
input [1:0] rt;
input sampler_rx;

reg [1:0] Opcode_expected;
reg [1:0] Opcode_check_expected;
reg [1:0] rd_expected;
reg [1:0] rs_expected;
reg [1:0] rt_expected;

reg [1:0] Opcode_prev;
reg [1:0] Opcode_check_prev;
reg [1:0] rd_prev;
reg [1:0] rs_prev;
reg [1:0] rt_prev;

reg [1:0] Opcode_expected_prev;
reg [1:0] rd_expected_prev;
reg [1:0] rs_expected_prev;
reg [1:0] rt_expected_prev;

reg [1:0] last_Opcode_exp;
reg [1:0] last_rd_exp;
reg [1:0] last_rs_exp;
reg [1:0] last_rt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Opcode_prev = Opcode;
	Opcode_check_prev = Opcode_check;
	rd_prev = rd;
	rs_prev = rs;
	rt_prev = rt;
end

// update expected /o prevs

always @(trigger)
begin
	Opcode_expected_prev = Opcode_expected;
	rd_expected_prev = rd_expected;
	rs_expected_prev = rs_expected;
	rt_expected_prev = rt_expected;
end


// expected Opcode[ 1 ]
initial
begin
	Opcode_expected[1] = 1'bX;
end 
// expected Opcode[ 0 ]
initial
begin
	Opcode_expected[0] = 1'bX;
end 
// expected rs[ 1 ]
initial
begin
	rs_expected[1] = 1'bX;
end 
// expected rs[ 0 ]
initial
begin
	rs_expected[0] = 1'bX;
end 
// expected rt[ 1 ]
initial
begin
	rt_expected[1] = 1'bX;
end 
// expected rt[ 0 ]
initial
begin
	rt_expected[0] = 1'bX;
end 
// expected rd[ 1 ]
initial
begin
	rd_expected[1] = 1'bX;
end 
// expected rd[ 0 ]
initial
begin
	rd_expected[0] = 1'bX;
end 
// generate trigger
always @(Opcode_expected or Opcode or Opcode_check_expected or Opcode_check or rd_expected or rd or rs_expected or rs or rt_expected or rt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Opcode = %b | expected Opcode_check = %b | expected rd = %b | expected rs = %b | expected rt = %b | ",Opcode_expected_prev,Opcode_check_expected_prev,rd_expected_prev,rs_expected_prev,rt_expected_prev);
	$display("| real Opcode = %b | real Opcode_check = %b | real rd = %b | real rs = %b | real rt = %b | ",Opcode_prev,Opcode_check_prev,rd_prev,rs_prev,rt_prev);
`endif
	if (
		( Opcode_expected_prev[0] !== 1'bx ) && ( Opcode_prev[0] !== Opcode_expected_prev[0] )
		&& ((Opcode_expected_prev[0] !== last_Opcode_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opcode_expected_prev);
		$display ("     Real value = %b", Opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Opcode_exp[0] = Opcode_expected_prev[0];
	end
	if (
		( Opcode_expected_prev[1] !== 1'bx ) && ( Opcode_prev[1] !== Opcode_expected_prev[1] )
		&& ((Opcode_expected_prev[1] !== last_Opcode_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opcode_expected_prev);
		$display ("     Real value = %b", Opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Opcode_exp[1] = Opcode_expected_prev[1];
	end
	if (
		( rd_expected_prev[0] !== 1'bx ) && ( rd_prev[0] !== rd_expected_prev[0] )
		&& ((rd_expected_prev[0] !== last_rd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rd_exp[0] = rd_expected_prev[0];
	end
	if (
		( rd_expected_prev[1] !== 1'bx ) && ( rd_prev[1] !== rd_expected_prev[1] )
		&& ((rd_expected_prev[1] !== last_rd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rd_exp[1] = rd_expected_prev[1];
	end
	if (
		( rs_expected_prev[0] !== 1'bx ) && ( rs_prev[0] !== rs_expected_prev[0] )
		&& ((rs_expected_prev[0] !== last_rs_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rs_exp[0] = rs_expected_prev[0];
	end
	if (
		( rs_expected_prev[1] !== 1'bx ) && ( rs_prev[1] !== rs_expected_prev[1] )
		&& ((rs_expected_prev[1] !== last_rs_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rs_exp[1] = rs_expected_prev[1];
	end
	if (
		( rt_expected_prev[0] !== 1'bx ) && ( rt_prev[0] !== rt_expected_prev[0] )
		&& ((rt_expected_prev[0] !== last_rt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rt_exp[0] = rt_expected_prev[0];
	end
	if (
		( rt_expected_prev[1] !== 1'bx ) && ( rt_prev[1] !== rt_expected_prev[1] )
		&& ((rt_expected_prev[1] !== last_rt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rt_exp[1] = rt_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module instruction_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] pc_in;
// wires                                               
wire [1:0] Opcode;
wire [1:0] Opcode_check;
wire [1:0] rd;
wire [1:0] rs;
wire [1:0] rt;

wire sampler;                             

// assign statements (if any)                          
instruction_file i1 (
// port map - connection between master ports and signals/registers   
	.Opcode(Opcode),
	.Opcode_check(Opcode_check),
	.pc_in(pc_in),
	.rd(rd),
	.rs(rs),
	.rt(rt)
);
// pc_in[ 1 ]
initial
begin
	pc_in[1] = 1'b0;
	pc_in[1] = #340000 1'b1;
	pc_in[1] = #290000 1'b0;
end 
// pc_in[ 0 ]
initial
begin
	pc_in[0] = 1'b0;
	pc_in[0] = #210000 1'b1;
	pc_in[0] = #130000 1'b0;
	pc_in[0] = #130000 1'b1;
	pc_in[0] = #160000 1'b0;
end 

instruction_file_vlg_sample_tst tb_sample (
	.pc_in(pc_in),
	.sampler_tx(sampler)
);

instruction_file_vlg_check_tst tb_out(
	.Opcode(Opcode),
	.Opcode_check(Opcode_check),
	.rd(rd),
	.rs(rs),
	.rt(rt),
	.sampler_rx(sampler)
);
endmodule

