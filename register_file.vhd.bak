library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity register_file is
port(
  clk, rst : in std_logic;
  wr  : in std_logic; -- write control
  write_data : in std_logic_vector(7 downto 0); -- write data to destination
  
  src1_addr : in std_logic_vector(1 downto 0); -- source 1 address
  src2_addr : in std_logic_vector(1 downto 0); -- source 2 address
  dst_addr : in std_logic_vector(1 downto 0); -- destination address
  
  src1_out : out std_logic_vector(7 downto 0);-- source 1 address
  src2_out : out std_logic_vector(7 downto 0);-- source 1 address
);
end register_file;

architecture Behavioral of register_file is
type reg_type is array (0 to 7) of  std_logic_vector(7 downto 0);
signal reg_array: reg_type;
begin 
  process(clk,rst)
  begin
  if(rst='1') then
    reg_array(0) <= x"00000000"
	 reg_array(1) <= x"00000000"
	 reg_array(2) <= x"00000000"
	 reg_array(3) <= x"00000000"
	 reg_array(4) <= x"00000000"
	 reg_array(5) <= x"00000000"
	 reg_array(6) <= x"00000000"
	 reg_array(7) <= x"00000000"
	 
	elsif(rising_edge(clk)) then
	  if(wr = '1') then 
	    reg_array(to_integer(unsigned(dst_addr))) <= write_data;
	  end if;
	end if;
	end process;
end Behavioral;
	 
  
